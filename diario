Dia 1--> *Lectura y apuntes Reflelcted XSS
         *Laboratorio(Reflected XSS into HTML context with nothing encoded(1),Reflected XSS into attribute with angle brackets HTML-encoded(2),Reflected XSS into a JavaScript string with angle brackets HTML encoded(3),
         Lab: Reflected XSS with some SVG markup allowed(4),
         
         2--> Debido a que '< y >' los capturas y los codifica hay que usar un payload que se pueda ejecutar dentro de una etiqueta h1. Por ello utilizo el evento onfocus=alert() y 
         el evento autofocus hace que automaticamente se ejecute el codigo dentro del onfocus
         3--> El script guarda lo introducido en la busqueda en una variable pero encodea los angle brackets. Formas de salirse de un string de javascript y ejecutar codigo es la 
         siguiente:  '-alert(document.domain)-'
         4--> La etiqueta svg esta permitida pero la mayoria de eventos estan bloqueados. Con burpsuite Intruder pruebas cuales son los eventos que no bloquea. El evento que no bloquea 
         es el animateTransform y onBegin=script(<svg><animatetransform onbegin=alert(1) attributeName=transform>). Esto lo que hace es: es que genera animaciones a través de establecer
         propiedades de transformacion.
         
Dia 2-->*Laboratorios(Reflected XSS into a JavaScript string with single quote and backslash escaped(1),Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped(2),
        Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped(3)
        1--> en este laboratorio los <y> estaban permitidos y la busqueda se introducia en una variable dentro de un script. Por tanto lo que habia que hacer era cerrar el script
        y eras libre de manejar el codigo si no introducias ' y \. (</script><script>alert()</script>
        2--> en este laboratorio estaban filtrados todos los caracteres excepto el backslash por lo que con el backslash delante de la ' que estaba bloqueada el programa lo detecta
        como que se lo debe tomar para interpretar literalmente y no como un caracter especial.
        3--> en este laboratorio estaban bloqueados todos los caracteres especiales incluidos el backslash por lo que la unica manera de introducir codigo era a traves del ${ } 
        por lo que el payload:${alert()} funciona. 
        Otra de forma de solucionarlo es pasarle directamente el codigo HTML-encodeado por lo que el codigo no filtra ningun caracter especial y al ejecutar se HTML-encodea y vuelve el 
        caracter especial
Dia 3-->*Lectura y apuntes Stored XSS
        *Laboratorios(Stored XSS into HTML context with nothing encoded(1),Stored XSS into anchor href attribute with double quotes HTML-encoded(2)
        2--> El comentario te pide introducir una url de una web de tu comentario y no tiene ningun tipo de filtro. Por lo que introduzco una url javascript:(codigo javascript)alert()
Dia 4-->*Buscar XSS en hackerone, encontré mi primer XSS muy sencillo pero era duplicado.
Dia 5-->*Laboratorios Dom-based XSS(DOM XSS in document.write sink using source location.search(1),DOM XSS in document.write sink using source location.search inside a select element(2),
        DOM XSS in innerHTML sink using source location.search(3),DOM XSS in jQuery anchor href attribute sink using location.search source(4),
        Stored DOM XSS(5)
        1.Al introducir un string te dabas cuenta que se introducia dentro de una img del src por lo que cerrabas el string con
        "> e introducias un svg onload que daba un alert
        2.La vulnerabilidad se encuentra en la consulta de stock,pero la web no deja introducir ningun nuevo producto para introducir codigo, pero 
        en la url si añades &storeId='aqui te deja añadir cualquier cosa que quieras introducir' https://0a0a005503f4f63bc00e1e0300a70014.web-security-academy.net/product?productId=1&storeId=%3Cscript%3Ealert()%3C/script%3E
        3.En este caso el sink encargado de escribir el search era innerHtml por lo que no se podia usar ni script ni svg y el contenido se mostraba dentro de la apertura y el cierre 
        de dos span tags, por lo que simplemente con introducir <img src=1 onerror=alert()> ya funcionaba
        4.En este caso el codigo contenia la libreria jquery y el atributo attr(href, )que la href cogia el codigo del return path de url, por lo que simplemente cambiando el path a
        javascript:alert(document.cookie) ya saltaba la alerta
        5.El comentario era tratado por un sink innerhtml por lo que no valia script ni svg pero con img onerror si funciona
        
        
        
      
